class Node<T> {
    T item;
    Node<T> next;

    public Node(T item) {
        this.item = item;
        this.next = null;
    }
}

class LinkedList<T extends Comparable<T>> {
    Node<T> head;

    // Removes the node following a given node
    public void removeAfter(Node<T> node) {
        if (node != null && node.next != null) {
            node.next = node.next.next;
        }
    }

    // Creates a deep copy of the linked list
    public Node<T> copy() {
        if (head == null) return null;

        Node<T> newHead = new Node<>(head.item);
        Node<T> tail = newHead;
        Node<T> current = head.next;
        while (current != null) {
            tail.next = new Node<>(current.item);
            tail = tail.next;
            current = current.next;
        }
        return newHead;
    }

    // Removes all nodes with an item equal to the key
    public void removeDuplicates(T key) {
        while (head != null && head.item.equals(key)) {
            head = head.next;
        }

        Node<T> current = head;
        while (current != null && current.next != null) {
            if (current.next.item.equals(key)) {
                current.next = current.next.next;
            } else {
                current = current.next;
            }
        }
    }

    // Returns the maximum item in the list
    public T max() {
        if (head == null) {
            return null; // Adjusted to return null for empty lists
        }

        T max = head.item;
        Node<T> current = head.next;
        while (current != null) {
            if (current.item.compareTo(max) > 0) {
                max = current.item;
            }
            current = current.next;
        }

        return max;
    }
}
